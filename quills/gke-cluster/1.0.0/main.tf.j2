# Google Provider configuration
provider "google" {
  project = "{{ project_id }}"
  region  = "{{ region }}"
}

# VPC Network
resource "google_compute_network" "vpc" {
  name                    = "{{ vpc_name }}"
  auto_create_subnetworks = false
}

# Subnet
resource "google_compute_subnetwork" "subnet" {
  name          = "{{ subnet_name }}"
  ip_cidr_range = "{{ subnet_cidr }}"
  region        = "{{ region }}"
  network       = google_compute_network.vpc.id

  secondary_ip_range {
    range_name    = "pods"
    ip_cidr_range = "{{ pods_cidr }}"
  }

  secondary_ip_range {
    range_name    = "services"
    ip_cidr_range = "{{ services_cidr }}"
  }
}

# GKE Cluster
resource "google_container_cluster" "primary" {
  name     = "{{ cluster_name }}"
  location = "{{ region }}"

  network    = google_compute_network.vpc.id
  subnetwork = google_compute_subnetwork.subnet.id

  remove_default_node_pool = true
  initial_node_count       = 1

  ip_allocation_policy {
    cluster_secondary_range_name  = "pods"
    services_secondary_range_name = "services"
  }

  private_cluster_config {
    enable_private_nodes    = true
    enable_private_endpoint = false
    master_ipv4_cidr_block = "{{ master_cidr }}"
  }

  master_authorized_networks_config {
    cidr_blocks {
      cidr_block   = "{{ authorized_cidr }}"
      display_name = "Authorized Network"
    }
  }
}

# Node Pool
resource "google_container_node_pool" "primary_nodes" {
  name       = "{{ node_pool_name }}"
  location   = "{{ region }}"
  cluster    = google_container_cluster.primary.name
  node_count = {{ node_count }}

  node_config {
    machine_type = "{{ machine_type }}"
    disk_size_gb = {{ disk_size_gb }}
    disk_type    = "{{ disk_type }}"

    oauth_scopes = [
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring",
      "https://www.googleapis.com/auth/devstorage.read_only"
    ]

    labels = {
      env = "{{ environment }}"
    }

    tags = ["gke-node", "{{ cluster_name }}-node"]
  }

  management {
    auto_repair  = true
    auto_upgrade = true
  }
} 